{"pages":[],"posts":[{"title":"Another new post 11133","text":"This is head 1balalalla This is head 2中文测试公式测试：$E=mc^2$$$E=mc^2$$ 代码块测试 1234567891011121314&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt; &lt;td class=&quot;gutter&quot;&gt; &lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt; &lt;/td&gt; &lt;td class=&quot;code&quot;&gt; &lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;hello:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;hexo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;","link":"/another-new-post-11133/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/hello-world/"},{"title":"New post test","text":"","link":"/new-post-test/"},{"title":"Linux 常用命令","text":"Linux 命令最常用的命令12345678910111213141516171819202122232425262728cd .. # 返回上一级目录cd # 返回根目录cd directory_name # 进入文件夹cd - # 返回上一次目录pwd # 显示当前目录ls # 显示当前文件夹下的文件和文件夹ls -a # 显示当前文件夹下的文件和文件夹，包括隐藏文件ls -l # 显示长信息，包括文件权限，修改时间等ls -i # 显示inode（物理索引）信息ls abc* # 列出以abc开头为文件名的所有文件rm # 删除mv # 移动cp # 拷贝mkdir directory_name # 创建文件夹touch filename # 创建文件./filename # 运行当前文件夹下的filename文件。如果不加“./”，则系统会到PATH宏下找文件？reboot # 重启su # 进入root模式（密码：root）sudo command_name #以root权限执行命令clear # 清屏reset # 清屏，更彻底一些？apt installapt remove Shawdowsocks相关123sslocal -c /home/burgess/shadowsocks.conf -d start # 开启梯子sslocal -c /home/burgess/shadowsocks.conf -d stop # 关闭梯子sslocal -s server.com -p 8388 -k password # 添加或修改参数 注意中间替换成配置文件的路径（burgess是用户名） Vim相关 vim是vi的升级版 命令行输入 vimtutor 就可以看到教程 基本操作 vim的三种模式 命令模式 其他模式下按Esc键可进入命令模式 输入模式 命令模式下按i或a或o可进入 “i”命令可以在当前光标之前插入文本。“a”命令可以在当前光标之后插入文本。（实测也是光标之前）“o”命令可以在当前行的下面另起一行，并使当前模式转为Insert模式。“O”命令(注意是大写的字母O)将在当前行的上面另起一行。 输入模式下，按Insert键可以选择插入模式（INSERT）还是替换模式（REPLACE） 底线命令模式 命令模式下输入:可进入，按回车结束运行 命令模式命令选择与跳转 命令 作用 gg 跳到文首 V 选择（Visual Line模式） G 跳到文尾（Ground） ggVG 全选 Visual Line下选择文本后，可执行以下命令： 命令 作用 d 删除 y 复制到&quot;剪切板 p 粘贴&quot;剪切板中的内容 “+y 复制到系统剪贴板(也就是vim的+寄存器） “+p 从系统剪贴板粘贴 删除 命令 作用 x 删除一个字符 dd 删除光标当前行 撤销与重做 命令 作用 u 撤销上一步操作 U 一次撤消对最后一次编辑的一行的全部操作。第二次使用该命令则会撤消前一个”U”的操作。 ctrl+r 重做（撤销撤销操作） 底线命令模式命令常用1:wq! # 强制保存并退出 编码与格式1234:set ff # 查看文件格式（fileformat）:set ff=unix # 设置文件格式为unix。解决文件无法执行问题。:set fileencoding # 查看文件编码:set fileencoding=utf-8 # 设置文件编码为utf-8。解决文件乱码问题。 输入模式命令网络命令write wall ping ifconfig mail last：查看用户登录信息 lastlog traceroute netstat：显示网络相关信息 netstat -rn：查看路由列表，可以看到网关 service network restart：重启网络 mount：挂载（一般挂载在/mnt的某个子目录下） 其他1ps -ef | grep process_name # 列出系统中当前运行的名字包含process_name的进程 12scp -r E:\\file_foder_name debian@192.168.137.2:/home/AA/BB # 跨服务器加密复制文件夹scp E:\\AA\\BB\\filename debian@192.168.137.2:/home/AA/BB # 跨服务器加密复制文件 1uname -a # 查看linux内核版本 1chmod -R 777 file_foder_name # 修改文件或文件夹的权限 1man command_name # 查看命令的帮助文件 1exit # 如果是在root模式下，则会退出root；如果是普通用户模式下，则会退出系统 ln命令12ln filename filename_lnk # 建立硬链接（Hard Link）ln -s filename filename_lnk # 建立软连接（Symbolic Link，符号链接） 软硬链接的区别：https://blog.csdn.net/yagamil/article/details/40076509 find命令看手册 tar命令tar.gz压缩： 1tar -zcvf 压缩文件名.tar.gz 被压缩文件名 解压缩： 1tar -zxvf 压缩文件名.tar.gz -C 解压路径（不含文件名） 各参数含义： -z：有gzip属性的 -x：解压 -v：显示所有过程 -f：使用档案名字（放最后） 参考：https://www.cnblogs.com/manong--/p/8012324.html tar解压： 1tar -xvf file.tar 配置命令1sudo cp .bashrc /root/.bashrc # 在普通用户模式下使用。会使root模式下也有配色。 1sudo passwd # 修改root密码，要先输入当前用户登录密码 Linux 问题git clone 下载的文件夹无法移动git clone之前忘记cd到合适的位置了，于是clone完之后想通过mv命令将文件夹移到它的上一级目录，但提示Permission denied，于是root模式下加了777权限，也不行，不知道为什么，最后删了重新下载。","link":"/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"title":"OpenVLC 可行性测试报告","text":"OpenVLC 简介OpenVLC是一个由西班牙IMDEA网络研究所领导研究和开发工作的开源、灵活、低成本的可见光通信系统平台。OpenVLC的灵活性体现在一个OpenVLC模块既可以充当发射器，也可以充当接收器。 OpenVLC 1.3平台由搭载AM3358芯片（ARM A8架构）的BeagleBone Black（BBB）开发板以及OpenVLC扩展板组成，以Linux（Debian 8及以上）为操作系统。 利用BBB中的可编程实时单元（Programmable Real Time Units，PRU），OpenVLC传输频率可达到1MHz，能够在距离超过3米的传输层实现400kb/s的数据吞吐量。 平台搭建过程在SD卡中刷入系统镜像 首先需要一张容量至少4GB的SD卡，将其格式化。 下载Debian系统镜像并解压。可以选择Debian 8或以上的版本，由于Debian 9版本支持可视化界面，因此这里选择下载Debian 9版本。在后面的步骤，不同版本的系统配置方式略有不同。另外，系统需要从Beagleboard网站上下载，此网站上的Debian系统是为Beagleboard系列开发板定制的，与Debian官网上的系统不同。 下载链接：https://debian.beagleboard.org/images/bone-debian-9.12-imgtec-armhf-2020-04-06-4gb.img.xz 下载安装Win32 Disk Imager工具，用此工具将bone-debian-9.12-imgtec-armhf-2020-04-06-4gb.img镜像写入SD卡。 给BBB刷系统在BBB断电的情况下，将SD卡插入开发板中，接着，用USB线（或USB线和网线）连接电脑和BBB。 Beagleboard官网发布的Debian系统分为两大类，分别为“eMMC flasher”和“without flashing the eMMC”。 若下载的是系统是前者，则系统含有eMMC flasher工具，进入系统后（方法见三种与开发板通信的方式），执行以下命令即可将SD卡中的系统烧写入BBB的eMMC（Embedded Multi Media Card）： 12cd /opt/scripts/tools/eMMCsudo ./bbb-eMMC-flasher-eewiki-ext4.sh 若下载的系统是后者，则需要进入SD中的系统（方法见三种与开发板通信的方式），打开uEnv.txt文件： 1sudo nano /boot/uEnv.txt 将最后一行的 1#cmdline=init=/opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh 取消注释。重启后（sudo reboot，或按RESET键，或断电再供电），系统才会自动写入开发板。 在将系统烧写进开发板的过程中，BBB的四个LED灯会以跑马灯的形式闪烁，待四个LED灯全部亮起或全部熄灭，或者出现提示“eMMC has been flashed”时，系统即烧写完成。 三种与开发板通信的方式： 方法一：打开Windows的“设备管理器”，查看新接入的BBB的端口号。使用PuTTY（或其他软件）与BBB进行串口通信，波特率设置为115200。 这种方法只需要一根USB线，USB线起到了供电和（串口）通信的作用。 方法二：用网线将BBB连接到电脑，USB线用于供电，用Windows的命令行窗口的ssh命令： 1ssh debian@192.168.7.2 或者用软件PuTTY（或其他软件），通过SSH连接IP 192.168.7.2。Debian系统的初始用户名为debian，密码为temppwd；超级用户root的密码为root。 这种方法需要一根USB线和一根网线，分别用来给BBB供电和与BBB通信。 方法三（仅适用于Debian 9或以上版本）：打开浏览器，输入192.168.7.2即可进入Cloud IDE界面，无须输入用户名和密码。 这种方法只需要一根USB线，USB线起到了供电和（网络）通信的作用。 设置系统 取消HDMI功能 由于BBB的HDMI占用了PRU的部分引脚，因此需要取消HDMI使能。编辑uEnv.txt文件： 1sudo nano /boot/uEnv.txt 若系统为Debian 8，则取消此行的注释： 1#dtb=am335x-boneblack-emmc-overlay.dtb 若系统为Debian 9或以上，则取消以下两行的注释： 12#disable_uboot_overlay_video=1#disable_uboot_overlay_audio=1 重启BBB后，HDMI便取消使能了。 安装Linux头文件库 首先将BBB连接到互联网（联网方法），接着更新软件列表： 1sudo apt-get update 然后安装linux-headers： 1sudo apt-get install linux-headers-$(uname -r) 将源代码拷贝到开发板 源代码可放在/home/debian目录下。拷贝方法有以下几种： 方法一：通过git命令 12cd /home/Debiansudo git clone https://github.com/openvlc/OpenVLC 方法二：通过scp命令 先在Github上将源代码下载到主机，再通过以下命令将源代码文件夹传输到BBB： 1scp -r ./OpenVLC-master debian@192.168.7.2:/home/debian 拷贝完源代码后，需要给代码文件赋予读写和执行权限，以方便后续操作： 1chmod -R 777 OpenVLC-master 联网方法 BBB开发板有三个网卡：eth0，usb0和usb1，分别对应网线口、Mini-A USB和Type A USB接口。测试表明无法只通过一条USB让BBB联网，可能是因为一条USB线无法同时传输网络数据和与主机的通信数据。因此这里采用“网线+USB”的连接方案。 联网步骤如下： 主机采用串口与BBB通信，并将网卡网络分享给网线口网卡。 IP设置 这里BBB和主机都采用静态IP，网关分别设为对方的IP。在BBB上须修改/etc/network/interfaces文件，具体设置如下（主机IP为192.168.137.1，BBB的IP为192.168.137.2，其他IP类似）： 1234567auto eth0allow-hotplug eth0iface eth0 inet static address 192.168.137.2 network 192.168.137.0 netmask 255.255.255.0 gateway 192.168.137.1 DNS服务器设置 DNS服务器设置需要在/etc/resolv.conf文件中添加DNS服务器的IP地址，可直接设置为主机网线口网卡的IP地址，或谷歌DNS服务器等。可设置多个DNS服务器备用。 1234nameserver 192.168.137.1nameserver 8.8.8.8nameserver 114.114.114.114nameserver 119.29.29.29 重启网卡 1sudo /etc/init.d/networking restart 也可以先关闭再开启网卡： 12sudo ifdown eth0sudo ifup eth0 注意：BBB重启后IP地址会重新随机分配（目前不知道为什么），不会跟/etc/network/interfaces文件中设置的一样，需要重启网卡才能保持一致。 全部操作完成后，执行 1ping baidu.com 以测试网络配置是否正确。 连接扩展板如图连接开发板和扩展板，扩展板用5V电源供电。 设置TX/RX 安装PRU编译器 下载并安装PRU编译器。文件拷贝方法和运行方法前面已经提到。 下载链接：https://software-dl.ti.com/codegen/esd/cgt_public_sw/PRU/2.3.3/ti_cgt_pru_2.3.3_armlinuxa8hf_busybox_installer.sh 建立PRU编译器和链接器的符号链接 运行以下命令即可： 12345cd /usr/share/ti/cgt-prusudo mkdir bincd binsudo ln -s /usr/bin/clpru clprusudo ln -s /usr/bin/lnkpru lnkpru 添加VLC网卡驱动 发送器（TX）和接收器（RX）的VLC网卡的需要使用不同的IP地址，打开Driver文件夹下的load_test.sh脚本文件，将TX和RX的VLC网卡IP修改成不一样的值，同时也不要和其他网卡IP一样。可以将TX设为192.168.0.1，RX设为192.168.0.2。 修改完毕后，运行load_test.sh脚本文件进行测试： 1sudo ./load_test.sh 此脚本会调用之前安装的linux-headers和OpenVLC的项目文件。运行完此脚本文件后，通过ifconfig命令可以查看网卡信息，会发现多了一项网卡驱动：vlc0。 启动PRU 分别运行PRU/TX和PRU/RX文件夹下的deploy.sh脚本文件，验证代码的正确性以及测试OpenVLC模块是否能正常工作（大功率LED灯是否能发光，设备是否发热严重等）。 1sudo ./deploy.sh 测试数据吞吐量 使用iperf工具进行测试，TX端执行命令： 1sudo iperf -c 192.168.0.2 -u -b 400k -l 800 -p 10001 -t 100 RX端执行命令： 1sudo iperf -u -l 800 -s -i3 -B 192.168.0.2 -p 10001 实际实验过程与结果OpenVLC平台搭建扩展板制作电路原理图 电路原理图链接：https://github.com/openvlc/OpenVLC/blob/master/Latest_Version/Hardware/Design_files/Schematics.SchDoc BOM清单 BOM清单链接：https://github.com/openvlc/OpenVLC/blob/master/Latest_Version/Hardware/Design_files/BOM.xlsx 其中部分元器件采用国产元器件替代。 数量 组件 电路图代号 值 封装 产品 1 DC-DC DC-DC TO-263-6 LM2585D2:E25SX-ADJ 1 Schottky D1 850mV @ 3A DO-214AC (SMA) SK310AR3GCT-ND 2 MGD MGD_C MGD_I SOT-23-6 LM5114BMF/NOPBCT 2 MOSFET MOSFET_C MOSFET_I TO-236-3 SQ2308CES-T1_GE3 1 OP AMP O 2 CIRCUITS 8-MSOP-EP LTC6269IMS8E 1 ADC ADC_PD 3MSPS 12bits SOT-23-6 ADS7883 1 Connector (big rectangle) PJ-102A 2 Headers (12x2 one of each side) 732-5303 1 Inductor L1 33µH D (8.70mm) x13.00mm RLB0914-330KL 1 LED HL 3000K 3.45mm x 3.45mm XHP35A-01-0000-0D0HC40E7CT-ND 1 Lense (on top of HL) 30°, 31° 16.1mm D FA10645_TINA-M 1 Heatsink (below HL) 1528-1698-ND 1 Photodiode PD 880nm 5ns 40° Radial 5mm D (T 1 3/4) QSD2030-ND 1 Cap C1 100uF Radial, encapsulado 493-1548 6 Cap C2 C5 C6_1 C6_2 C9 C11 0.1 uF 0603 1276-1258-1 1 Cap C3 0.33 uF 0603 490-3294-1 1 Cap C4 1500 uF Radial, Can 158AVG016MGBJ 1 Cap C7 1 uF 0603 1276-1942-1 1 Cap C8 0.01 uF 0603 1276-1921-1 1 Cap C10 0.5 pF 0603 1276-1818-1 2 Cap C12 C13 1000 pF 0603 490-8019-1 1 Res R1 3kOhm 0603 MCT0603-3.00K-CFCT 1 Res R2 12kOhm 0603 MCT0603-12.0K-CFCT 1 Res R3 1.5 kOhm 0603 P1.50KHCT-ND 5 Res R4_21 R4_22 R7 R8 R11 150Ohm 0603 RHM150DCT 1 Res R6 1kOhm 0603 RR08P1.0KDCT 2 Res R5 R10 75kOhm 0603 RR08P75.0KDCT 1 Res R9 10kOhm 0603 RR08P10.0KDCT 1 Res R4_11 1.8Ohm 1210 ERJ-P14J1R8U 1 Res R4_12 8.66Ohm 1206 CRCW12068R66FKEA 1 Power switch PS MIC94070YC6-TR 委托厂家制作电路板以及焊接部分元器件 PCB设计图链接：https://github.com/openvlc/OpenVLC/blob/master/Latest_Version/Hardware/Design_files/PCB_Design.PcbDoc 焊接剩余元器件及简单测试插针式元器件的焊接较为容易，这里不赘述。贴片式元器件的焊接与测试过程如下： 将焊枪温度调整到300摄氏度左右，然后用焊枪在焊盘上涂抹适量松香。 接着，在焊枪尖部附着适量（根据焊盘大小而定）金属锡，然后使贴片所用焊盘都附着上一定量的锡，同时保证电路板各焊盘之外没有多余的锡。 用热风枪对准焊盘加热锡，待焊盘处的锡融化后，用镊子将贴片准确地放置于焊盘上，然后轻轻地用镊子在贴片上方压一压，使贴片贴合焊盘。 将热风枪温度调到200摄氏度左右，用热风枪吹除多余松香；或者在焊接完所有元器件后，将电路板浸泡在酒精中。 用胶枪将部分外露焊点包围固定。 焊接完所有元器件后，对照电路图，用万用表对电路板进行简单的测试，包括导通测试、阻值、容值测量等。 焊接完所有元器件后的成品图如下（LED灯的散热片未装，准备后续补上）： 扩展板测试供电问题扩展板需要用5V电压（5.5mm圆形接口）供电，而实验室常见的电源适配器都是12V的，不能直接接入。因此在测试阶段，我们剪掉了一个坏掉的适配器的5.5mm圆形接头，插入扩展板的圆形接口，用稳压源输出5V进行供电，解决了临时供电的问题。同时，我们也在淘宝上购买了两个5V 2A的电源适配器。 扩展板测试（用单片机）用STM32的GPIO输出3.3V电压，将电源开关芯片的CT输入（GPIO1_29）拉高，同时通过简单的程序控制两个LM5114B芯片（MGD_C和MGD_I）的两个VIN输入（P8_45和P8_46，亦即GPIO2_6和GPIO2_27）的电平，观察不同输入组合下LED的亮度。 结果发现：在P8_45和P8_46都为高电平时，LED最亮；P8_45为高电平，P8_46为低电平时，LED的亮度稍微弱了一些；P8_45为低电平，P8_46为高电平时，LED的亮度更弱；P8_45和P8_46都为低电平时，LED基本不亮，只发出微量的光。 通过分析电路原理图容易得知：由于LED的负极与GND之间并联了两条放大电路，两条并联电路分别由P8_45和P8_46来控制导通，且除了电阻R4_11和电阻R4_12的阻值不同外，其他部分都相同。由于R4_11为1.8Ω，而R4_12为8.66Ω（电路原理图上为13.6Ω，但BOM表上为8.66Ω，这里我们选择了后者），因此P8_46相比P8_45对LED电流的控制作用较弱，即LED电流主要由R4_11所在的这一路决定。 在焊接完两个扩展板后，我们对其进行测试的实际过程中，其中一个电路板测试无误，而另外一个经过测试，发现有多处出现了焊接问题，包括电源开关芯片以及所连接的针脚处没焊牢，5.5mm电源接口焊接有问题。另外还发现在给电路板通电后，MOS管冒烟，在替换掉MOS管后，终于整个电路板测试正常。 组装将扩展板的排针插到BBB的对应位置上，完成后效果如图： OpenVLC程序测试散热问题由于LED的散热片没安上，在测试时我们用小风扇来散热。若没有风扇散热，LED通电后会大量发热，温度足以融化绝缘胶。 汇编RX源代码问题在测试时发现RX目录下的pru1_rx.asm文件存在没有将P8_45和P8_46都拉低的问题，这会导致OpenVLC模块在作为TX运行之后再转为RX运行时，会出现LED不灭的情况。通过在pru1_rx.asm文件的START1下添加将P8_45和P8_46电平拉低的语句即可在开启RX时关闭LED。 123START1: CLR r30, r30.t0 CLR r30, r30.t1 测试结果TX终端测试结果： RX终端测试结果： 通过此次测试，我们验证了TX与RX进行可见光通信的可行性。 后续工作目标 将LED散热片装好。 利用OpenVLC平台实现视频的可见光传输。","link":"/openvlc-%E5%8F%AF%E8%A1%8C%E6%80%A7%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"}],"tags":[{"name":"Test","slug":"Test","link":"/tags/Test/"},{"name":"Test2","slug":"Test2","link":"/tags/Test2/"},{"name":"This is a tag","slug":"This-is-a-tag","link":"/tags/This-is-a-tag/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Vim","slug":"Vim","link":"/tags/Vim/"},{"name":"VLC","slug":"VLC","link":"/tags/VLC/"},{"name":"Beaglebone","slug":"Beaglebone","link":"/tags/Beaglebone/"}],"categories":[]}